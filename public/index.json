{"categories":[{"link":"/categories/code-highlighting/","name":"Code-Highlighting","slug":"Code-Highlighting"},{"link":"/categories/git/","name":"Git","slug":"Git"},{"link":"/categories/github/","name":"Github","slug":"Github"},{"link":"/categories/image-rendering/","name":"Image-Rendering","slug":"Image-Rendering"},{"link":"/categories/test/","name":"Test","slug":"Test"}],"pages":[],"posts":[{"link":"/posts/git-branch/","text":"Bayangkan anda sedang bekerja dengan tim pada suatu repositori Git. Repositori ini dikerjakan secara bersama-sama.\nKadang… akan terjadi konflik, karena kode yang kita tulis berbeda dengan yang lain.\nMisalnya, Si A menulis kode untuk fitur X dengan algoritma yang ia ketahui. Sedangkan si B menulis dengan algoritma yang berbeda.\nLalu mereka melakukan commit, dan kode sumber jadi berantakan. Anggota tim yang lain menjadi pusing.\nSistem Git\nAgar tidak terjadi hal yang seperti ini, kita harus membuat cabang (branch) tersendiri.\nMisalnya, si A akan mengerjakan fitur X, maka dia harus membuat cabang sendiri. Si A akan bebas melakukan apapun di cabangnya tanpa mengganggu cabang utama (master).\nCara Membuat Cabang Baru Perintah untuk membuat cabang adalah git branch, kemudian diikuti dengan nama cabangnya.\nContoh:\nBASH\rTutup\rSalin\rgit branch fitur_register\rKlik untuk membuka dan melihat lebih banyak\rMaka Git akan membuat cabang bernama fitur_register.\nSistem Git\nSekarang setiap orang memiliki cabangnya masing-masing. Mereka bebas bereksperimen.\nUntuk melihat cabang apa saja yang ada di repositori, gunakan perintah git branch.\nContoh:\nBASH\rTutup\rSalin\r$ git branch halaman_login * master\rKlik untuk membuka dan melihat lebih banyak\rTanda bintang (*) artinya cabang yang sedang aktif atau Kita sedang berada di sana.\nLatihan Untuk memantapkan pemahaman tentang percabangan Git, mari kita coba praktik.\nPada repositori, buatlah sebuah cabang baru.\nBASH\rTutup\rSalin\rgit branch halaman_login\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu, pindah ke cabng yang baru saja kita buat dengan perintah:\nBASH\rTutup\rSalin\rgit checkout halaman_login\rKlik untuk membuka dan melihat lebih banyak\rLalu tambhakan file login.html, isinya terserah anda.\nSistem Git\nTips\rJangan lupa untuk menggunakan perintah git status untuk melihat status repository.\nKita sudah menambahkan file login.html. Selanjutnya kita lakukan commit.\nBASH\rTutup\rSalin\rgit add login.html git commit -m \u0026#34;membuat file login.html\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rBagus! revisi kita pada cabang halaman_login sudah disimpan. Sekarang coba kembali ke cabang master.\nBASH\rTutup\rSalin\rgit checkout master\rKlik untuk membuka dan melihat lebih banyak\rApakah anda menemukan file login.html?\nPasti Tidak!\nSekarang kembali lagi kecabang halam_login.\nBASH\rTutup\rSalin\rgit checkout halaman_login\rKlik untuk membuka dan melihat lebih banyak\rCek lagi, apakah sekarang file login.html sudah ada?\nYAML\rTutup\rSalin\rproject-01/ ├── index.html └── login.html\rKlik untuk membuka dan melihat lebih banyak\rTernyata ada. Yep! kita bisa mengambil kesimpulan, kalau perubahan pada cabang halaman_login tidak akan berpengaruh di cabang master.\nMenggabukan Cabang Anggaplah kita sudah selesai membuat fitur login di cabang halaman_login. Sekarang kita ingin Menggabungkannya dengan cabang master (utama).\nPertama, kita harus pindah dulu ke cabang master.\nBASH\rTutup\rSalin\rgit checkout master\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu, barulah kita bisa menggabungkan dengan perintah git merge.\nBASH\rTutup\rSalin\rgit merger halaman_login\rKlik untuk membuka dan melihat lebih banyak\rSekarang lihat, file login.html sudah ada di cabang master.\nSistem Git\nHati-hati! kadang sering terjadi bentrok ketika menggabungkan cabang.\nGitHub\rThe world\u0026#39;s largest code hosting platform.\ngithub.com\rMengatasi Bentrok Bentrok biasanya terjadi jika ada dua orang yang mengedit file yang sama.\nKenapa bisa begitu, ‘kan mereka sudah punya cabang masing-masing?\nBisa jadi, di cabang yang mereka kerjakan ada file yang sama dengan cabang lain. Kemudian, saat digabungkan terjadi bentrok.\nMengatasi bentrok adalah tugas dari pemilik atau pengelola repositori. Dia harus bertindak adil, kode mana yang harus diambil.\nBiasanya akan ada proses diskusi dulu dalam mengambil keputusan.\nBaiklah, sekarang kita akan coba membuat bentrokan 😄.\nPindah dulu ke branch halaman_login…\nBASH\rTutup\rSalin\rgit checkout halaman_login\rKlik untuk membuka dan melihat lebih banyak\rSetela itu, edit file login.html atau index.html, karena kedua file tersebut ada di kedua cabang yang akan kita gabungkan.\nDIFF\rTutup\rSalin\r$ git diff diff --git a/login.html b/login.html index 23a3f5c..eea5658 100644 --- a/login.html +++ b/login.html @@ -1 +1 @@ -di sini berisi kode untuk halaman login +\u0026lt;p\u0026gt;di sini berisi kode untuk halaman login\u0026lt;p\u0026gt; Klik untuk membuka dan melihat lebih banyak\rSetelah itu, lakukan commit lagi:\nBASH\rTutup\rSalin\rgit add login.html git commit -m \u0026#34;ubah isi login.html\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rSelanjutnya pindah ke cabang master dan lakukan perubahan juga di cabang ini. Ubah file yang sama seperti di cabang halaman_login.\nSetelah itu, lakukan commit di cabang master\nBASH\rTutup\rSalin\rgit add login.html git commit -m \u0026#34;ubah isi login.html di cabang master\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rTerakhir, coba gabungkan cabang halaman_login dengan cabang master, maka akan terjadi bentrok.\nBASH\rTutup\rSalin\r$ git merge halaman_login Auto-merging login.html CONFLICT (content): Merge conflict in login.html Automatic merge failed; fix conflicts and then commit the result.\rKlik untuk membuka dan melihat lebih banyak\rNah, kita disuruh perbaiki kode yang bentrok. Sekarang buka login.html dengan teks editor.\nSistem Git\nKedua kode cabang dipisahkan dengan tanda ======. Sekarang.. tugas kita adalah memperbaikinya.\nSilakan eliminasi salah satu dari kode tersebut.\nSistem Git\nSetelah itu lakukan commit untuk menyimpan perubahan ini.\nBASH\rTutup\rSalin\rgit add login.html git commit -m \u0026#34;perbaiki konflik\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rBagus! bentrokan antar ormas programmer sudah beres 😄.\nMenghapus Cabang Cabang yang sudah mati atau tidak ada pengembangan lagi, sebaiknya dihapus.\nAgar repositori kita bersih dan rapi.\nCara menghapus cabang, gunakan perintah git branch dengan argumen -d dan diikuti dengan nama cabangnya.\nContoh:\nBASH\rTutup\rSalin\rgit branch -d halaman_login\rKlik untuk membuka dan melihat lebih banyak\rAkhir Kata… Sekian tutorial ini. Semoga ada manfaatnya.\nReferensi: help.github.com\n","title":"Tutorial Git #7: Menggunakan Percabangan untuk Mencegah Konflik"},{"link":"/posts/membatalkan-revisi/","text":"Pada tutorial git 05, kita sudah belajar cara meilihat perbedaa di setiap revisi, Sekarang kita akan belajar, cara membatalkan sebuah revisi.\nTerkadang pad perubahan yang kita lakukan terjadi kesalahan dan kita ingin mengebalikanya seperti keadaan sebelumnya. Maka kita perlu membatalkan dan memerintahkan git untuk mengembalikanya. Ada beberapa perintah yang digunakan di antaranya: git checkout, git reset,, dan git revert.\nMembatalkan Perubahan Jika revisi kita belum staged atupun mengetahui, kita bisa mengembalikan mengunakan perintah git checkout nama_file.html.\nContoh: Misalkan kita akan mengubah isi dari file index.html pada repositori project-01.\nSebelum diubah:\nHTML\rTutup\rSalin\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rSetelah diubah:\nHTML\rTutup\rSalin\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Belajar git ternyata cukup menyenangkan\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rHasil git diff\nDIFF\rTutup\rSalin\r$ git diff diff --git a/index.html b/index.html index c5082e6..115efcb 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar git ternyata cukup menyenangkan\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Klik untuk membuka dan melihat lebih banyak\rSekarang kita akan membatalkan perubahan tersebut. Karena kita belum melakukan stage dan commit, maka kita bisa menggunakan perintah:\nBASH\rTutup\rSalin\rgit checkout index.html\rKlik untuk membuka dan melihat lebih banyak\rPerubahan yang baru saja kita lakukan akan dibatalkan. Kalau tidak percaya, coba saja periksa file yang sudah diubah tadi atau cek dengan perintah git status.\nBASH\rTutup\rSalin\r$ git status On branch master nothing to commit, working directory clean\rKlik untuk membuka dan melihat lebih banyak\rHati-hati! Terkadang perintah ini sangat berbahaya, karena akan menghapus perubahan yang baru saja dilakukan.\nBila kita sudah mengubah banyak hal, maka itu akan sia-sia setelah menjalankan perintah ini.\nMembatalkan Perubahan File yang Sudah dalam Kondisi staged Kondisi staged merupakan kondisi file yang sudah di add (git add), namun belum disimpan (git commit) ke dalam Git.\nSebagai contoh, kita lakukan perubahan lagi di file index.html seperti pada contoh sebelumnya.\nDIFF\rTutup\rSalin\r$ git diff diff --git a/index.html b/index.html index c5082e6..c99aa5b 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar git ternyata gampang-gampang susah\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Klik untuk membuka dan melihat lebih banyak\rSetelah itu, kita ubah kondisi file menjadi staged dengan perintah:\nBASH\rTutup\rSalin\rgit add index.html\rKlik untuk membuka dan melihat lebih banyak\rCek statusnya dulu:\nBASH\rTutup\rSalin\r$ git status On branch master Changes to be mengetahui: (use \u0026#34;git reset HEAD \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: index.html\rKlik untuk membuka dan melihat lebih banyak\rNah, file index.html sudah masuk ke dalam kondisi staged. Untuk mengubahnya menjadi kondisi modified, kita bisa menggunakan perintah git reset.\nBASH\rTutup\rSalin\rgit reset index.html\rKlik untuk membuka dan melihat lebih banyak\rCek statusnya lagi:\nBASH\rTutup\rSalin\r$ git status On branch master Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be mengetahui) (use \u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: index.html no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;)\rKlik untuk membuka dan melihat lebih banyak\rSekarang file index.html sudah dalam kondisi modified, kita bisa membatalkan perubahannya dengan perintah git checkout seperti contoh sebelumnya.\nMaka perubahan yang kita lakukan akan dibatalkan, 😄.\nSistem Git\nMembatalkan Perubahan File yagn Sudah dalam Kondisi Committed Sekarang bagaimana kalau filenya sudah dalam kondisi mengetahui dan kita ingin mengembalikannya? Untuk melakukan ini, kita harus mengetahui nomer commit, kemudian mengembalikan perubahannya seperti pada nomer commit tersebut.\nMisalkan, kita ubah kembali file index.html.\nBASH\rTutup\rSalin\r$ git diff diff --git a/index.html b/index.html index c5082e6..3c150a8 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar Git Greget!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rKemudian kita melakuan commit.\nBASH\rTutup\rSalin\rgit add index.html git commit -m \u0026#34;belajar git greget!\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rSekarng kita akan melihat nomer commit dengan perintah git log.\nSistem Git\nKita akan mengembalikan kondisi file index.html, seperti pada commit sebelumnya. Maka kita bisa menggunakan perintah:\nBASH\rTutup\rSalin\rgit checkout b05f7d05c9298f2cd11b870369f3cf4b2350eca7 index.html\rKlik untuk membuka dan melihat lebih banyak\rSeperti mesin waktu, kita sudah mengembalikan keadaan file index.html seperti keadaan saat commit tersebut. Namun, saat ini kondisi index.html dalam keadaan staged. Kita bisa kembalikan ke dalam kondisi modified dengan perintah git reset.\nBASH\rTutup\rSalin\rgit reset index.html\rKlik untuk membuka dan melihat lebih banyak\rPada contoh tersebut, kita sudah berhasil mengembalikan file index.html ke dalam keadaan seperti commit sebelumnya.\nApabila kita ingin mengembalikan seluruh file dalam commit, kita cukup melakukan checkout ke nomer commit saja, tanpa diikuti nama file. Contoh:\nBASH\rTutup\rSalin\rgit checkout ac6d798f98bac5fad693ef8159f957c5b0805c23\rKlik untuk membuka dan melihat lebih banyak\rCatatan: Perintah ini akan mengembalikan semua file dalam kondisi pada nomer commit yang diberikan, namun bersifat temporer.\nKembali ke 3 Commint sebelumnya Untuk kembali ke 3 commit sebelumnya, kita bisa menggunakan perintah berikut.\nBASH\rTutup\rSalin\rgit checkout HEAD~3 index.html\rKlik untuk membuka dan melihat lebih banyak\rMembatalkan Semua Perubahan yang ada Jika kita ingin mengembalikan semua file ke suatu commitm kita bisa melakaukan dengan perintah:\nBASH\rTutup\rSalin\rgit revert -n \u0026lt;nomer commit\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rContoh:\nBASH\rTutup\rSalin\rgit revert -n 2400ba0e258bd6a144caa273012b130d6baa5e42\rKlik untuk membuka dan melihat lebih banyak\rAkhit Kata OK, sekian dulu tutorial ke-6 ini. Rasanya agak kepanjangan. Terima kasih sudah membaca. Sampai jumpa di tutorial ke-7.\n","title":"Tutorial Git #6: Perintah untuk Membatalkan Revisi"},{"link":"/posts/git-diff/","text":"Pada tutorial sebelumnya, kita sudah belajar car melihat revisi di repositori. Sekarang kita akan pelajari perintah git diff, fungsinya untuk melihat perbedaan perubahan pada di revisi.\nMelihat Perbadingan Perubahan yang Dilakaukan Pada Revisi Gunakan perintah berikut ini untuk melihat perubahan yang dilakukan pada revisi tertentu.\nBASH\rTutup\rSalin\rgit diff cf08ca0837cf26f1c595be36bb3a6b815e311be1\rKlik untuk membuka dan melihat lebih banyak\rcf08ca0837cf26f1c595be36bb3a6b815e311be1 adalah nomer revisi yang ingin dilihat.\nSistem Git\nLihatlah hasil di atas, simbol plus (+) artinya kode yang ditambahkan. Sedangkan kalau ada kode yang dihapus simbolnya akan menggunakan minus (-).\nContoh:\nDitambahkan:\nDIFF\rTutup\rSalin\r+ \u0026lt;p\u0026gt; ini kode yangditambahkan\u0026lt;/p\u0026gt; Klik untuk membuka dan melihat lebih banyak\rDihapus:\nDIFF\rTutup\rSalin\r- \u0026lt;i\u0026gt;ini kode yang dihapus\u0026lt;/i\u0026gt; Klik untuk membuka dan melihat lebih banyak\rDimodifikasi/diubah:\nDIFF\rTutup\rSalin\r- \u0026lt;span\u0026gt;ini kode sebelum diubah\u0026lt;/span\u0026gt; + \u0026lt;span\u0026gt;ini kode sesudah diubah\u0026lt;/span\u0026gt; Klik untuk membuka dan melihat lebih banyak\rSekarang kita akan mencoba mengubah isi dari index.html.\nSebelum diubah:\nHTML\rTutup\rSalin\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Semua, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rSetelah diubah:\nHTML\rTutup\rSalin\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu lakukan perintah git diff lagi.\nSistem Git\nApa yang dilakukan git diff? Perintah git diff akan membandingkan perubahan yang baru saja dilakukan dengan revisi/commit terakhir.\nMelihat perubahan Perbandingan pada File Apabila kita melakukan banyak perubahan, makan akan banyak sekali tampilan output, Karena itu, kita mungkin hanya perlu melihat perubahan untuk file tertentu saja. Untuk melihat perbadingan perubahan pada file tertentu, gunakan perintah berikut.\nBASH\rTutup\rSalin\rgit diff index.html\rKlik untuk membuka dan melihat lebih banyak\rPerintah diatas akan melihat perbedaa perubahan pada file index.html saja.\nMelihat Perbadingan antara Revisi/Commit Perintah untuk membandingkan perubahan pada revisi dengan revisi yang lain adalah sebagai berikut.\nBASH\rTutup\rSalin\rgit diff \u0026lt;nomer commit\u0026gt; \u0026lt;nomer commit\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rContoh:\nBASH\rTutup\rSalin\rgit diff cf08ca0837cf26f1c595be36bb3a6b815e311be1 06f735af7724558164c87f6b1ce3ca7778eb1c1b\rKlik untuk membuka dan melihat lebih banyak\rPerbadingan Antara Cabang (Branch) Kita memang belum masuk ke materi percabangan di Git. Tapi tidak ada salahnya mengetahui cara melihat perbandingan perubahan antar cabang.\nBASH\rTutup\rSalin\rgit diff \u0026lt;nama cabang\u0026gt; \u0026lt;nama cabang\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rPenutup Kita sudah pelajari fungsi dari perintah git diff. Perintah ini untuk melihat perbandingan perubahan apa saja yang telah dilakukan pada repositori. Selanjutnya, kita akan belajar membatalkan revisi.\nSelanjutnya: Tutorial Git 06 - Membatalkan Revisi\n","title":"Tutorial Git #5: Melihat Perbandingan Revisi dengan Git Diff"},{"link":"/posts/git-log/","text":"Pada Tutorial Sebelumnya, kita sudah membuat dua revisi oada repositori project-01. Sekarang bagaimana cara kita meilhat catatab log dari revisi tersebut?\nGit sudah menyediakan perintag git log untuk melihat catatan perubahan pada repositori. Contoh Penggunaanya:\nBASH\rTutup\rSalin\rgit log\rKlik untuk membuka dan melihat lebih banyak\rMaka kita akan melihat log perubahan apa saja yang sudah kita lakukan dalam repositori.\nSistem Git\nPada gambar diatas, terdapat dua revisi perubahan yang dilakukan .\nLog yang Lebih Pendek untuk menapilkan log yang lebih pendek, kita bisa menabahan argumen --online.\nBASH\rTutup\rSalin\rgit log --online\rKlik untuk membuka dan melihat lebih banyak\rMaka akan menghasilkan output:\nBASH\rTutup\rSalin\r06f735a ditambahkan isi cf08ca0 commit pertama\rKlik untuk membuka dan melihat lebih banyak\rLog pada Nomer Revisi/Commit Untuk meilihat log pada revisi tertentu, kita bisa memasukan nomer revisi/commit.\nBASH\rTutup\rSalin\rgit log cf08ca0837cf26f1c595be36bb3a6b815e311be1\rKlik untuk membuka dan melihat lebih banyak\rMaka akan menghasilkan output:\nBASH\rTutup\rSalin\rcommit cf08ca0837cf26f1c595be36bb3a6b815e311be1 Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:08:56 2017 +0800 commit pertama\rKlik untuk membuka dan melihat lebih banyak\rLog pada File Tertentu Utnuk melihat revisi pada file tertentu, kita dapa memasukan nama filenya.\nBASH\rTutup\rSalin\rgit log index.html\rKlik untuk membuka dan melihat lebih banyak\rMaka akan menghasilkan output:\nBASH\rTutup\rSalin\rcommit 06f735af7724558164c87f6b1ce3ca7778eb1c1b Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:26:50 2017 +0800 ditambahkan isi commit cf08ca0837cf26f1c595be36bb3a6b815e311be1 Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:08:56 2017 +0800 commit pertama\rKlik untuk membuka dan melihat lebih banyak\rKarena file `index.html sudah direvisi sebanyak dua kali.\nLog Revisi yang dilakukan oleh Auhtor Tertentu Misalkan dalam repositori dikerjakan oleh banyak orang. Maka kita dapa melihat revisi apa saja yang dilakukan oleh orang tertentu dengan perintah berikut.\nBASH\rTutup\rSalin\rgit log --auhtor=\u0026#39;example\u0026#39;\rKlik untuk membuka dan melihat lebih banyak\rPenutup Itulah beberapa cara melihat log revisi pada repositoru. Perintah yang dugunakan adalah git log. Selanjutnya kita akan pelajari git diff untuk melihat perbandingan pada revisi.\nSelanjutnya: Tutoria Git 05-Melihat Perbandingan revisi\n","title":"Tutorial Git #4: Melihat Catatan Log Revisi"},{"link":"/posts/git-commit/","text":"Pada tutorial Git yang kedua, kita sudah membuat repositori kosong. Belum ada apa-apa di sana.\nSekarang coba tambahkan sebuah file baru.\nSebagai contoh, saya akan menambahkan tiga file HTML kosong.\nSistem Git\nSetelah ditambahkan, coba ketik perintah git status untuk melihat status repositorinya.\nSistem Git\nBerdasarkan keterangan di atas, saat ini kita berada cabang (branch) master dan ada tiga file yang belum ditambahkan ke Git.\nTiga Kelompok Kondisi File dalam Git sebelum kita membuat revisi, kita akan berkenalan dulu dengan tiga kondisi file dalam Git.\n1. Modified Modified adalah kondisi di mana revisi atau perubahan sudah dilakukan, tetapi belum ditandai dan belum disimpan di version control. Contohnya pada gambar di atas, ada tiga file HTML yang dalam kondisi modified.\n2. Staged Staged adalah kondisi di mana revisi sudah ditandai, tetapi belum disimpan di version control. Untuk mengubah kondisi file dari modified ke staged gunakan perintah git add nama_file. Contoh:\nBASH\rTutup\rSalin\rgit add index.md\rKlik untuk membuka dan melihat lebih banyak\r3. Commited Committed adalah kondisi di mana revisi sudah disimpan di version control. perintah untuk mengubah kondisi file dari staged ke committed adalah git commit.\nMembuat Revisi Pertama Baiklah, sekarang kita akan sudah tahu kondisi-kondisi file dalam Git. Selanjutnya, silakan ubah kondisi tiga file HTML tadi menjadi staged dengan perintah git add.\nBASH\rTutup\rSalin\rgit add index.html git add about.html git add contact.html\rKlik untuk membuka dan melihat lebih banyak\rAtau kita melakukan seprti ini:\nBASH\rTutup\rSalin\rgit add index.html abaout.html contact.html\rKlik untuk membuka dan melihat lebih banyak\ratau:\nBASH\rTutup\rSalin\rgit add *.html\rKlik untuk membuka dan melihat lebih banyak\rAtau seperti ini (semua file dan direktori):\nBASH\rTutup\rSalin\rgit add.\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu, cobalah ketik perintah git status lagi. Kondisi filenya sekarang akan menjadi staged.\nSistem Git\nSetelah itu, ubah kondisi file tersebut ke committed agar semua perubahan disimpan oleh Git.\nBASH\rTutup\rSalin\rgit commit -m \u0026#34;commit pertama\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu, coba cek dengan perintah git status lagi.\nSistem Git\nSelamat, revisi pertama sudah kita buat. Selanjutnya cobalah untuk membuat revisi kedua.\nMebuat Revisi Kedua Ceritnaya ada perubahana yang akan kita lakukan pada file index.html. Silakahkan modifikasi index.htm. Sebagai contoh saya mengisi seperti ini.\nBASH\rTutup\rSalin\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Semua, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rKlik untuk membuka dan melihat lebih banyak\rSetelah itu ketik perintah git statusus.\nSistem Git\nTerlihat disana, file index.html sudah di modifikasi. kondisinya sekarang berada dalam modified. Lakukan commit lagi seperti revisi pertama.\nBASH\rTutup\rSalin\rgit add index.html git commit -m \u0026#34;ditambahkan isi\u0026#34;\rKlik untuk membuka dan melihat lebih banyak\rDengan demikian, revisi kedua sudah disimpan oleh Git. Mungkin anda belom tahu maksud dari argumen -m, argumen tersebut untuk menambahkan pesan setiap menyimpan revisi.\nSistem Git\nSekarang Git sudah mencatat revisi yang sudah kita lakukan, Kita bisa ibratakan revisi-revisi ini sebgai checkpoint pada Game, Apabila nanti ada kesalahan , kita bisa kembali ke checkpoint ini.\nSekian untuk tutorial ke-3 ini, mudah-mudahan bermanfaa.\nSelnajutnya: Tutorial Git 04-Melihat Log Revisi\n","title":"Belajar Git #03: Cara Membuat Repositori Git pada Proyek"},{"link":"/posts/install-git/","text":"Kita sudah mengenal Git pada tulisan sebelumnya. Selanjutnya Kita akan melakukan instalasi dan persiapan untuk mulai belajar Git.\nTulisan ini terbagi menjadi tiga bagian:\nCara Instalasi Git di Linux. Cara Instalasi Git di Windows. Konfigurasi Awal yang Harus dilakukan Setelah Menginstal Git. Mari kita mulai…\n1. Cara Install Git di Linux Instalasi Git pada Distro keluarga Debian dapat menggunakan perintah apt.\nBASH\rTutup\rSalin\rsudo apt install git\rKlik untuk membuka dan melihat lebih banyak\ratau\nBASH\rTutup\rSalin\rsudo apt-get install git\rKlik untuk membuka dan melihat lebih banyak\rPada Fedora:\nBASH\rTutup\rSalin\ryum install git\rKlik untuk membuka dan melihat lebih banyak\rSetalah itu, coba periksa versi yang terinstall dengan perintah:\nBASH\rTutup\rSalin\rgit --version\rKlik untuk membuka dan melihat lebih banyak\rPada komputer saya, versi yang terinstall dengan perintah:\nSistem Git\n2. Cara Install Git di Windows Instalasi Git di Windows memang tidak seperti di Linux yang ketik perintah langsung terinstal.\nKita harus men-download dulu, kemudian melakukan ritual next\u0026gt;next\u0026gt;finish.\nTapi dalam ritual tersebut, ada pilihan yang harus diperhatikan agar perintah git dapat dikenali di CMD.\nDownload Git Silakan buka website resminya Git git-scm.com. Kemudian unduh Git sesuai dengan arsitektur komputer kita. Kalau menggunakan 64bit, unduh yang 64bit. Begitu juga kalau menggunakan 32bit.\nLangkah-langkah Install Git di Windows Baiklah, mari kita mulai ritual instalnya. Silakan klik 2x file instaler Git yang sudah diunduh.\nSistem Git Diwndows\nMaka akan muncul informasi lisensi Git, klik Next \u0026gt; untuk melanjutkan.\nSistem Git Diwndows\nSelanjutnya menentukan lokasi instalasi. Biarkan saja apa adanya, kemudian klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pemilihan komponen, biarkan saja seperti ini kemudian klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pemilihan direktori start menu, klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pengaturan PATH Environment. Pilih yang tengah agar perintah git dapat di kenali di Command Prompt (CMD). Setelah itu klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya konversi line ending. Biarkan saja seperti ini, kemudian klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pemilihan emulator terminal. Pilih saja yang bawah, kemudian klik Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pemilihan opsi ekstra. Klik saja Next \u0026gt;.\nSistem Git Diwndows\nSelanjutnya pemilihan opsi eksperimental, langsung saja klik Install untuk memulai instalasi.\nSistem Git Diwndows\nTunggu beberapa saat, instalasi sedang dilakukan.\nSistem Git Diwndows\nSetelah selesai, kita bisa langsung klik Finish.\nSistem Git Diwndows\nSelamat, Git sudah terinstal di Windows. Untuk mencobanya, silakan buka CMD atau PowerShell, kemudian ketik perintah git \u0026ndash;version.\nSistem Git\nCara Install Git di MacOS Buat kamu yang menggunakan MacOS, git bisa diinstal dengan brew.\nBuka terminal lalu, ketik perintah berikut untuk menginstal Git:\nZSH\rTutup\rSalin\rbrew install git\rKlik untuk membuka dan melihat lebih banyak\rTunggulah beberapa saat sampai proses instalasinya selesai. Setelah itu, coba ketik perintah berikut untuk mengecek versi git yang terinstal:\nZSH\rTutup\rSalin\rgit --version\rKlik untuk membuka dan melihat lebih banyak\rMaka hasilnya:\nSistem Git\nIni artinya, git versi 2.42.0 sudah terinstal dengan benar di MacOS. Selanjutnya, kita bisa lakukan konfigurasi awal.\n3. Konfigurasi Awal yang Harus Dilakukan Ada beberapa konfigurasi yang harus dilakukan sebelum mulai menggunakan Git, seperti menentukan name dan email.\nSilakan lakukan konfigurasi dengan perintah berikut ini.\nBASH\rTutup\rSalin\rgit config --global user.name \u0026#34;example\u0026#34; git config --global user.email contoh@exaample.com\rKlik untuk membuka dan melihat lebih banyak\rKemudian periksa konfigurasinya dengan perintah:\nBASH\rTutup\rSalin\rgit config --list\rKlik untuk membuka dan melihat lebih banyak\rApabila berhasil tampil seperti gambar berikut ini, berarti konfigurasi berhasil.\nSistem Git\nKonfigurasi core.editor bersifat opsional. Sedangkan name dan email wajib.\nJika kamu memiliki akun Github, Gitlab, Bitbucket atau yang lainnya…\nmaka username dan email harus mengikuti akun tersebut agar mudah diintegrasikan.\nSelain konfigurasi awal ini, kamu juga bisa konfigurasi SSH key untuk Github, Gitlab, dan Bitbucket.\nSilakan baca caranya di sini:\nCara Setup SSH Key untuk Github Cara Setup SSH Key untuk Gitlab Cara Setup SSH Key untuk Bitbucket Konfigurasi Default Branch saat ini Secara default, repository Git akan menggunakan nama branch master ketika kita baru pertama membuat repository.\nNama ini sebenarnya mulai ditinggalkan dan disarankan pakai nama main. Soalnya di Github.. default branch atau branch utama yang digunakan adalah main.\nSaat kita mau upload repo ke Github, nantinya kita akan diminta untuk mengubah master menjadi main.\nBiar tidak repot, kita setup aja dari awal.\nLalu gimana caranya supaya Git otomatis menggunakan main secara default?\nGampang, kita cukup tambahkan konfigurasi ini.\nSilakan ketik di Terminal atau CMD:\nBASH\rTutup\rSalin\rgit config --global init.defaultBranch main\rKlik untuk membuka dan melihat lebih banyak\rDengan demikian, Git akan otomatis menggunakan nama main sebagai branch utama.\nApa Selanjutnya? Bagus, kita sudah mempersiapkan semuanya. Selanjutnya kita bisa langsung belajar membuat repositori git.\n","title":"Tutorial Git #1: Cara Install Git dan Konfigurasi Awal yang Harus Dilakukan"},{"link":"/posts/git-untuk-pemula/","text":"Git adalah salah satu tool yang sering digunakan dalam proyek pengembangan software.\nGit bahkan menjadi tool yang wajib dipahami oleh programmer, karena banyak digunakan di mana-mana.\nPada kesempatan ini kita akan belajar Git dari dasar.\nArtikel ini hanya akan membahas pengenalan Git saja. Untuk mempelajari Git lebih lanjut, saya sudah menyediakan link di bagian akhir.\nMengenal Git Git adalah salah satu sistem pengontrol versi (Version Control System) pada proyek perangkat lunak yang diciptakan oleh Linus Torvalds.\nPengontrol versi bertugas mencatat setiap perubahan pada file proyek yang dikerjakan oleh banyak orang maupun sendiri.\nGit dikenal juga dengan distributed revision control (VCS terdistribusi), artinya penyimpanan database Git tidak hanya berada dalam satu tempat saja.\nSistem Git\nSemua orang yang terlibat dalam pengkodean proyek akan menyimpan database Git, sehingga akan memudahkan dalam mengelola proyek baik online maupun offline.\nDalam Git terdapat merge untuk menyebut aktifitas penggabungan kode.\nSedangkan pada VCS (Version Control System) yang terpusat… database disimpan dalam satu tempat dan setiap perubahan disimpan ke sana.\nSistem Git\nVCS terpusat memiliki beberapa kekurangan:\nSemua tim terkoneksi ke jaringan untuk mengakses source-code. Tersimpan di satu tempat, nanti kalau server bermasalah bagaimana? Kerana itu, Git Hadir untuk menutup kekurangan yang dimiliki oleh VCS terpusat.\nApa yang dilakukan oleh GIt? Git sebenarnya akan memantau semua perubahan yang terjadi pada file proyek. Lalu menyimpannya ke dalam database.\nSebelum menggunakan Git:\nRevisi Tanpa Git\nSetelah menggunakan Git:\nSistem Git\nApa perbedaannya?\nSaat kita ingin menyimpan semua perubahan pada file, biasanya kita membuat file baru dengan “save as”. Lalu, file akan menumpuk dalam direktori proyek seperti pada ilustrasi di atas.\nTapi setelah menggunakan Git…\nHanya akan ada satu file dalam proyek dan perubahannya disimpan dalam database.\nGit hanya akan menyimpan delta perubahannya saja, dia tidak akan menyimpan seluruh isi file yang akan memakan banyak memori.\nGit memungkinkan kita kembali ke versi revisi yang kita inginkan.\nKenpa Git Penting Bagi Programes? Sistem Git\nJadi selain untuk mengontrol versi, git juga digunakan untuk kolaborasi.\nSaat ini Git menjadi salah satu tool terpopuler yang digunakan pada pengembangan software open source maupun closed source.\nGoogle, Microsoft, Facebook dan berbagai perusahaan raksasa lainnya menggunakan Git.\nJadi, buat kamu yang punya impian ingin bekerja di sana, maka kamu harus bisa Git.\nGitHub\rThe world\u0026#39;s largest code hosting platform.\ngithub.com\rSelain itu, berikut ini ada beberapa menfaat yang akan kamu rasakan setelah bisa menggunakan Git.\nBisa menyimpan seluruh versi source code; Bisa paham cara kolaborasi dalam proyek; Bisa ikut berkontribusi ke proyek open-source; Lebih aman digunakan untuk kolaborasi, karena kita bisa tahu apa yang diubah dan siapa yang mengubahnya. Bisa memahami cara deploy aplikasi modern; Bisa membuat blog dengan SSG. dan sebagainya… Apa Selanjutnya? Jadi, apakah kamu sudah mengenal git?\nBagus, selanjutnya silakan ikuti tutorial git berikut ini.\nTutorial Git #01: Cara Install Git dan Konfigurasi Awal yang harus dilakukan Tutorial Git #02: Membuat Repositori Baru dalam Proyek Tutorial Git #03: Membuat Revisi dan Menyimpannya dengan Git Commit Tutorial Git #04: Melihat Catatan Log Revisi Git Tutorial Git #05: Melihat Perbandingan Revisi Git Tutorial Git #06: Membatalkan Revisi Git Tutorial Git #07: Menggunakan Percabangan untuk Mencegah Konflik Tutorial Git #08: Perbedaan Git Checkout, Git Reset, dan Git Revert Tutorial Git #09: Bekerja dengan Remote Repositori Tutorial Git #10: Kolaborasi dengan Tim pada Proyek Open Source Tutorial Git #11: Git Tag P.S: Kalau link di atas masih mati, berarti masih dalam draf. Sering-sering dicek agar tidak ketinggalan. 😄\n📖 Referensi:\nhttps://git-scm.com/\nhttps://en.wikipedia.org/wiki/Git\n","title":"Apa itu Git dan Kenapa Penting bagi Programmer?"},{"link":"/posts/uji-peringatan/","text":"Pengujian Peringatan Gaya GitHub Artikel ini digunakan untuk menguji fitur Peringatan gaya GitHub baru dan fungsionalitas lipat.\nSintaks Peringatan Peringatan Catatan Catatan\rIni adalah kotak peringatan catatan. Digunakan untuk menampilkan informasi berguna yang harus diperhatikan pengguna, bahkan saat menjelajahi konten dengan cepat.\nPeringatan Tip Tips\rIni adalah kotak peringatan tip. Memberikan saran yang membantu menyelesaikan tugas dengan lebih baik atau lebih mudah.\nPeringatan Penting Penting\rIni adalah kotak peringatan yang penting. Menampilkan informasi penting yang perlu diketahui pengguna untuk mencapai tujuan mereka.\nPeringatan Peringatan\rIni adalah kotak peringatan. Informasi mendesak yang membutuhkan perhatian segera pengguna untuk menghindari masalah.\nPeringatan Perhatian Perhatian\rIni adalah kotak peringatan perhatian. Menyarankan pengguna untuk menyadari risiko atau konsekuensi negatif dari perilaku tertentu.\nSintaks yang Diperluas - Judul Kustom Catatan dengan Judul Kustom Judul Kustom\rIni adalah kotak peringatan catatan dengan judul khusus.\nWarning with Custom Title Bahaya Radiasi\rJangan mendekati atau menangani tanpa alat pelindung.\nFitur Lipat Peringatan Lipat yang Diperluas secara Default Klik untuk menciutkan\rIni adalah kotak peringatan lipat yang diperluas secara default. Klik judul untuk menciutkan konten.\nMendukung konten multi-baris:\nDaftar item 1 Daftar item 2 Daftar item 3 Peringatan Terlipat Secara Default Informasi Penting (Diciutkan secara default)\rIni adalah kotak informasi penting yang diciutkan secara default. Klik judul untuk memperluas dan melihat konten.\nDapat mencakup:\nDaftar yang dipesan Teks tebal Teks miring Code snippet Peringatan Lipat dengan Konten Kompleks Contoh Konten Kompleks\rKotak lipat ini berisi konten Markdown yang kompleks:\nSubjudul Ini adalh paragraf yang berisi tautan pemformatan lainya.\nJAVASCRIPT\rTutup\rSalin\r// Code block example function hello() { console.log(\u0026#34;Hello, World!\u0026#34;); }\rKlik untuk membuka dan melihat lebih banyak\rTable Example Baris Data1 Baris Data2 Kutipan Blok Reguler Ini adalah kutipan blok biasa, bukan Peringatan:\nIni adalah kutipan blok standar. Ini tidak akan dirender sebagai Peringatan tetapi akan menggunakan gaya blockquote standar. Mendukung konten multi-baris dan teks yang diformat.\nMendukung konten multi-baris dan teks yang diformat. teks yang diformat.\nDukungan Multibahasa Pemberitahuan mendukung beberapa bahasa, dan judul akan ditampilkan secara otomatis dalam bahasa saat ini:\nCatatan\rDalam lingkungan Cina, judul ini akan ditampilkan sebagai \u0026ldquo;注意\u0026rdquo; (Catatan).\nTips\rDi lingkungan Cina, judul ini akan ditampilkan sebagai \u0026ldquo;提示\u0026rdquo; (Tip).\nPengujian Konten Berlapis Pengujian Konten Berlapis\rPemberitahuan ini berisi konten berlapis:\nIni adalah kutipan blok bersarang\nItem daftar Item daftar berlapis Item bersarang lainnya Daftar yang dipesan Daftar berurutan berlapis Item bersarang lainya ","title":"Tes Peringatan Gaya GitHub"},{"link":"/posts/tes-katex-dan-putri-duyung/","text":"Tes KaTeX dan Putri Duyung Artikel ini digunakan untuk menguji fitur KaTeX dan Mermaid.\nKonfigurasi Konfigurasi Frontmatter YAML\rTutup\rSalin\r--- katex: true mermaid: true ---\rKlik untuk membuka dan melihat lebih banyak\rKonfigurasi Global YAML\rTutup\rSalin\r# hugo.yaml katex: enabled: true delimiters: - left: \u0026#34;$$\u0026#34; right: \u0026#34;$$\u0026#34; display: true - left: \u0026#34;$\u0026#34; right: \u0026#34;$\u0026#34; display: false mermaid: enabled: true\rKlik untuk membuka dan melihat lebih banyak\rTes KaTeX Rumus sebaris Ini adalah rumus sebaris: $E = mc^2$, kesetaraan massa-energi Einstein.\nContoh Kapan $a \\neq 0$, solusi untuk persamaan kuadrat $ax^2 + bx + c = 0$ are $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$.\nRumus Blok Rumus Kuadrat $$x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$\nRumus Euler $$e^{i\\pi} + 1 = 0$$\nRumus Integral $$\\int_{-\\infty}^{\\infty} e^{-x^2} dx = \\sqrt{\\pi}$$\nRepresentasi Matriks $$\\begin{pmatrix} a \u0026amp; b \\\\ c \u0026amp; d \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} ax + by \\\\ cx + dy \\end{pmatrix}$$\nRumus Penjumlahan $$\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6}$$\nTes Simbol Matematika Umum Menggunakan makro yang telah ditentukan sebelumnya: $\\RR$, $\\NN$, $\\ZZ$, $\\QQ$, $\\CC$\n","title":"Tes KaTeX dan Putri Duyung"},{"link":"/posts/uji-rendering-gambar/","text":"Uji Rendering Gambar Demo berasal dari LightGallery Semua gambar bersal dari Unsplash\nGambar tunggal Photo by - Daniel Leone\rGaleri yang Dibenarkan Photo by - Tobias Rademacher\rPhoto by - Massimiliano Morosinotto\rPhoto by - Sascha Bosshard\rPhoto by - Yusuf Evli\rPhoto by - Jay Mantri\rPhoto by - Florian van Duyn\rPhoto by - Juan Davila\rPhoto by - David Marcu\rMasonry dengan kode pendek ","title":"Uji Rendering Gambar"},{"link":"/posts/ujicoba-penyorotan-kode/","text":"Uji Penyorotan Kode Artikel ini digunakan untuk menguji fitur penyorotan kode baru, termasuk penyorotan sintaks, tombol salin, tampilan bahasa, dll.\nJavaScript JAVASCRIPT\rTutup\rSalin\rfunction fibonacci(n) { if (n \u0026lt;= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } const result = fibonacci(10); console.log(`The 10th Fibonacci number is: ${result}`); // Async/Await const asyncFunction = async () =\u0026gt; { try { const response = await fetch(\u0026#39;/api/data\u0026#39;); const data = await response.json(); return data; } catch (error) { console.error(\u0026#39;Error fetching data:\u0026#39;, error); } };\rKlik untuk membuka dan melihat lebih banyak\rCodeblock dengan Nomor Baris PYTHON\rTutup\rSalin\r1# Python with line numbers 2import asyncio 3from typing import List, Optional 4 5class DataProcessor: 6 def __init__(self, data: List[dict]): 7 self.data = data 8 9 def process(self) -\u0026gt; Optional[dict]: 10 \u0026#34;\u0026#34;\u0026#34;Process the data and return the result\u0026#34;\u0026#34;\u0026#34; 11 if not self.data: 12 return None 13 14 result = { 15 \u0026#39;total\u0026#39;: len(self.data), 16 \u0026#39;processed\u0026#39;: [] 17 } 18 19 for item in self.data: 20 if self.validate_item(item): 21 result[\u0026#39;processed\u0026#39;].append(item) 22 23 return result\rKlik untuk membuka dan melihat lebih banyak\rMenyoroti Garis Tertentu GO\rTutup\rSalin\r1package main 2 3import \u0026#34;fmt\u0026#34; // This line will be highlighted 4 5func main() { 6 message := \u0026#34;Hello, World!\u0026#34; // This line will also be highlighted 7 8 fmt.Println(message) // This line will also be highlighted 9 10 for i := 0; i \u0026lt; 3; i++ { 11 fmt.Printf(\u0026#34;Count: %d\\n\u0026#34;, i) 12 } 13}\rKlik untuk membuka dan melihat lebih banyak\rCodeblock dengan Nama File api.ts\rTutup\rSalin\r// TypeScript API interface ApiResponse\u0026lt;T\u0026gt; { data: T; status: number; message: string; } interface User { id: number; name: string; email: string; avatar?: string; } class ApiClient { private baseURL: string; private headers: Record\u0026lt;string, string\u0026gt;; constructor(baseURL: string, apiKey?: string) { this.baseURL = baseURL; this.headers = { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, ...(apiKey \u0026amp;\u0026amp; { \u0026#39;Authorization\u0026#39;: `Bearer ${apiKey}` }) }; } async get\u0026lt;T\u0026gt;(endpoint: string): Promise\u0026lt;ApiResponse\u0026lt;T\u0026gt;\u0026gt; { const response = await fetch(`${this.baseURL}${endpoint}`, { method: \u0026#39;GET\u0026#39;, headers: this.headers, }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); } async post\u0026lt;T\u0026gt;(endpoint: string, data: any): Promise\u0026lt;ApiResponse\u0026lt;T\u0026gt;\u0026gt; { const response = await fetch(`${this.baseURL}${endpoint}`, { method: \u0026#39;POST\u0026#39;, headers: this.headers, body: JSON.stringify(data), }); return response.json(); } } const client = new ApiClient(\u0026#39;https://api.example.com\u0026#39;, \u0026#39;your-api-key\u0026#39;); async function getUsers(): Promise\u0026lt;User[]\u0026gt; { try { const response = await client.get\u0026lt;User[]\u0026gt;(\u0026#39;/users\u0026#39;); return response.data; } catch (error) { console.error(\u0026#39;Error fetching users:\u0026#39;, error); return []; } }\rKlik untuk membuka dan melihat lebih banyak\rBlok Kode Teks Biasa PLAINTEXT\rTutup\rSalin\rThis is a plain text codeblock.\rIt should not have syntax highlighting.\rYou can test the copy functionality here.\rfunction test() {\rconsole.log(\u0026#34;This is a test.\u0026#34;);\r}\rKlik untuk membuka dan melihat lebih banyak\rKode sebaris This is an inline code example：const x = 42; and npm install and git commit -m \u0026quot;update\u0026quot;.\n","title":"Uji Penyorotan Kode"},{"link":"/posts/markdown-syntax-test-document/","text":"Heading 1 Ini adalah paragraf dibawah judul level 1.\nHeading 2 Ini adalah paragraf dibawah judul level 2.\nHeading 3 Ini adalah paragraf dibawah judul level 3.\nHeading 4 Ini adalah paragraf dibawah judul level 4.\nHeading 5 Ini adalah paragraf dibawah judul level 5.\nHeading 6 Ini adalah paragraf dibawah judul level 6.\nParagraf dan Pemformatan Teks Ini adalah paragraf normal. Ini dapat berisi teks tebal, teks mirring, teks miring tebal, coretan, inline code, dan teks tautan.\nIni adalah paragraf lain untuk menguji jarak antar paragraf.\nKutipan blok Ini adalah kutipan blok sederhana.\nKutipan blok dapat berisi beberapa paragraf.\nIni adalah contoh kutipan blok bersarang:\nIni adalah konten kutipan bersarang.\nBeberapa tingkat bersarang dimungkinkan.\nDaftar Daftar Tidak Berurutan Item pertama Item kedua Item bersarang 1 Item bersarang 2 Item bersarang yang lebih dalam Item ketiga Daftar Terurut Item pertama Item kedua Item pesanan bersarang 1 Item pesanan bersarang 2 Item bersarang yang lebih dalam Item ketiga Daftar Tugas (Checkbox) Tugas selesai Tugas tidak selesai Another completed task Daftar tugas berlapis Subtugas 1 (selesai) Subtugas 2 (belum selesai) Subtugas 3 (selesai) Daftar Definisi Istilah 1 Ini adalah definisi untuk istilah 1. Istilah 2 Ini adalah definisi untuk istilah 2. Istilah dapat memiliki beberapa definisi. Kode Kode sebaris Ini adalah paragraf dengan bagian dalam console.log('Hello World').\nBlok Kode JAVASCRIPT\rTutup\rSalin\rfunction greet(name) { console.log(`Hello, ${name}!`); } greet(\u0026#39;World\u0026#39;);\rKlik untuk membuka dan melihat lebih banyak\rPYTHON\rTutup\rSalin\rdef fibonacci(n): if n \u0026lt;= 1: return n return fibonacci(n-1) + fibonacci(n-2) print(fibonacci(10))\rKlik untuk membuka dan melihat lebih banyak\rCSS\rTutup\rSalin\r.prose { max-width: none; color: var(--tw-prose-body); } .prose h1 { font-size: 2.25rem; font-weight: 700; }\rKlik untuk membuka dan melihat lebih banyak\rTables Menyejajarkan Kiri Tengah Menyelaraskan Sejajarkan Kanan Konten 1 Konten 2 Kontetn 3 Konten yang lebih panjang Sedang Pendek Data A Data B Data C Aturan Horisontal Gambar Contoh Gambar\rLinks Ini adalah Tautan reguler.\nIni adalah Tautan dengan judul.\nIni adalah tautan gaya referensi: Tautan referensi\nCatatan kaki Ini adalah paragraf dengan catatan kaki11.\nBerikut adalah catatan kaki lainnya2.\nTeks yang Disorot Ini adalah paragraf dengan ==teks yang disorot==.\nSuperskrip dan Subskrip H2O adalah rumus kimia untuk air.\nE = mc^2^ adalah persamaan massa-energi Einstein.\nTombol Keyboard Tekan Ctrl + C untuk menyalin teks.\nSingkatan HTML adalah singkatan dari HyperText Markup Language.\n*[HTML]: Bahasa Markup HyperText\nRumus Matematika (jika KaTeX didukung) Rumus sebaris: $E = mc^2$\nRumus blok:\n$$ \\int_{-\\infty}^{\\infty} e^{-x^2} dx = \\sqrt{\\pi} $$\nPeringatan (jika didukung) Catatan\rIni adlah catatan.\nTips\rIni adlah tip.\nPenting\rIni adlah informasi penting.\nPeringatan\rIni adalah peringatan.\nPerhatian\rIni adalah peringatan.\nDetail (jika didukung) Klik untuk memperluas detail\rIni adalah konten terperinci yang diciutkan.\nAnda dapat menyertakan sintaks Markdown apa pun di sini:\nDafatar Item Teks Tebal Code Tes Konten Campuran Paragraf ini berisi beberapa format: tebal, miring, code, tautan, dicoret, ==sorotan==.\nDaftar Kompleks Item pertama dengan teks tebal Item bersarang dengan code Item bersarang lainnya dengan tautan Item kedua dengan teks miring Item bersarang yang dipesan Item bersarang lain yang dipesan Item ketiga dengan teks yang dicoret Tabel Kompleks Fitur Keadaan Deskripsi Tebal ✅ Mendukung teks tebal Miring ✅ Mendukung huruf miring Code ✅ Mendukung kode sebaris Toutan ✅ Mendukung tautan Coretan ❌ Perlu diuji Dokumen pengujian ini mencakup sintaks Markdown yang paling umum dan dapat digunakan untuk memverifikasi kelengkapan dan estetika gaya prosa.\nIni adalah isi dari catatan kaki yang pertama.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIni adalah isi dari catatan kaki yang dinamai.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","title":"Markdown Syntax Test Document"}],"tags":[{"link":"/tags/alert/","name":"Alert","slug":"Alert"},{"link":"/tags/code/","name":"Code","slug":"Code"},{"link":"/tags/git/","name":"Git","slug":"Git"},{"link":"/tags/image/","name":"Image","slug":"Image"},{"link":"/tags/markdown/","name":"Markdown","slug":"Markdown"},{"link":"/tags/prose/","name":"Prose","slug":"Prose"},{"link":"/tags/rendering/","name":"Rendering","slug":"Rendering"},{"link":"/tags/style/","name":"Style","slug":"Style"},{"link":"/tags/syntax-highlighting/","name":"Syntax-Highlighting","slug":"Syntax-Highlighting"},{"link":"/tags/test/","name":"Test","slug":"Test"},{"link":"/tags/tutorials/","name":"Tutorials","slug":"Tutorials"}]}